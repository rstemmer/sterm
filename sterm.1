.TH STERM 1 "12 November 2023" "6.0.3" "sterm Manual"
.SH NAME
sterm \- a minimal serial terminal that focus on being easy to use. A client simply works.

.SH SYNOPSIS
.B sterm
[\fB\-h\fR | \fB\-\-help\fR] 
[\fB\-n\fR | \fB\-\-noecho\fR]
[\fB\-\-escape \fIcharacter\fR]
[\fB\-\-binary\fR]
[\fB\-b \fIbaudrate\fR | \fB\-\-baudrate \fIbaudrate\fR]
[\fB\-f \fIformat\fR | \fB\-\-format \fIformat\fR]
.IR "device"
.br

.SH DESCRIPTION
sterm is a minimal serial terminal that focus on being easy to use and not sucking. - This client simply works.
.br
It has inline input and supports Unicode (utf-8).
Each key typed gets directly send to the remote device.
It writes whatever it receives to stdout so that also ANSI escape sequences work as expected.
.br
With the \fI--binary\fR option, the received data will be output byte wise as hexadecimal numbers.
Ideal for debugging.
.br
sterm has some internal commands (escape sequences), listed below.
To enter a command you first have to enter an escape character.
Entering the escape character (see \fI--escape\fR) starts a command input.
If this command is known it gets executed.
If the command is unknown the input gets rejected.
When entering the escape character a second time, the escape character gets send to the remove client.


.SH OPTIONS
.TP
.BR \-h ", " \-\-help
Display a help, version number and exit
.TP
.BR \-\-binary
Print hexadecimal values instead of Unicode characters. (Only applied on output, input will still be UTF-8)
.TP
.BR \-n ", " \-\-noecho
Use this flag to avoid echoing the keys the user pressed to stdout.
When this flag is set, each character gets send directly, except when entering the escape key.
Then you can enter a command (escape sequence) that sterm handles internal.
.TP
.BR \-\-escape " " \fIcharacter\fR
With this parameter, the escape character can be changed.
By default, it is the escape key (\fI"\\e"\fR).
.TP
.BR \-b " " \fIbaudrate\fB  ", " \-\-baudrate " " \fIbaudrate\fR
Define the baudrate used for receiving and transmitting.
.br
Default: 115200 baud.
.TP
.BR \-f " " \fIformat\fB  ", " \-\-format " " \fIformat\fR
Configuration-triple: xyz with x = byte length in bits {5,6,7,8}; y = parity {N,E,O}; z = stop bits {1,2}.
.br
Default: "8N1" - 8 data bits, no parity bits and 1 stop bit.
.TP
.BR \-w " " \fIlogfile\fB  ", " \-\-write " " \fIlogfile\fR
Write received data into a log file. ANSI Escape sequences will also be written into the file.
In binary mode (\fI--binary\fR) binary data gets written into the file.
Otherwise the data is UTF-8 encoded.
.TP
.BR \fIdevice\fR
.br
Serial I/O device to access

.SH EXIT STATUS
.TP
0
Everything OK
.TP
1
On error

.SH INTERNAL COMMANDS
.TP
.BR exit
Close sterm
.TP
.BR version
Show the version of sterm

.SH EXAMPLES
.nf
.B sterm /dev/ttyUART0

.fi
Connect to UART device with 115200 baud, 8 data bits, 1 stop bit and no parity bit (8N1)

.P
.B sterm --binary -b 9600 -f 7E2 /dev/ttyS0

.fi
Connect with 9600 baud, 7 data bits, 2 stop bits and even parity:

.SH AUTHOR
Written by Ralf Stemmer <ralf.stemmer@gmx.net>

.SH REPORTING BUGS
GitHub: <https://github.com/rstemmer/sterm/issues>

.SH COPYRIGHT
sterm  Copyright (C) 2013-2023  Ralf Stemmer <ralf.stemmer@gmx.net>
.br
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This program comes with ABSOLUTELY NO WARRANTY
.br
This is free software, and you are welcome to redistribute it
under certain conditions.

.SH SEE ALSO
Full documentation at: <https://github.com/rstemmer/sterm>

